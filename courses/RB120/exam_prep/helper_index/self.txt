12. What is the `self` keyword in Ruby? Show how it works.
The `self` keyword is a reference to an object. The object it references is either a class or an instance of a class. Which it references depends on where it is used in the source code, also known as the lexical context.

The following example explains the rules that determine what `self` references:
```ruby
class Foo
  # used here in the class definition it references the class `Foo`
  foo_inception = self

  # self after the `def` keyword also references the class `Foo`. This defines a singleton method on the class `Foo` (a class method).
  def self.a_class_method
    # used inside a class method, it references the class `Foo`
  end

  def an_instance_method
    # used inside an instance method it references the instance of `Foo` that calls this method
  end
end

# What is `self` in the top level scope?
puts self # => main
puts self.class # => Object
# `self` references `main` an instance of the `Object` class
```

However, there's a twist to it. Ruby also uses `self` implicitly to determine what object a method with no explicit caller is called on.

For example, `self` is implicitly used when calling a method from an instance method without an explicit caller.
```ruby
# code ommited
def an_instance_method
  another_method # calls another instance method on same calling object
  self.another_method # the method call above is the same as this one
end
# code ommited
```