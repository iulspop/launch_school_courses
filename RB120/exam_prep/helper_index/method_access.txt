8. What is the method access control? Show how it works in Ruby.
Method access control is a way to control where methods can be called on an object built in to Ruby. Instance methods always have an access level. There are three levels: public, private and protected.

By default, any instance method defined on a class is public:
```ruby
class Car
  def accelerate; end
end
```

Instance methods can also explicitly be defined as public using the `public` keyword. Instance methods defined below that keyword are public.
```ruby
class Car
  public
  def accelerate; end
end
```

That means it can be called on instances of that class from outside the object.
```ruby
car = Car.new
car.accelarate
```
So, public instance methods form the interface users of the object interact with.

To define a private method, the private keyword is added to the class definition and any instance method defined on lines below the keyword are private methods.
```ruby
class Car
  private
  def accelerate; end
end
```

Private methods cannot be called on instances from the outside of the object.
```ruby
car = Car.new
car.accelerate # => NoMethodError
```

They can be called only from within the object. That is within public instance method calls of the same object.
```ruby
class Car
  def turn_on
    accelerate
  end

  private

  def accelerate; end
end
car = Car.new
car.turn_on
```
So, private methods are implementation details we don't want the user to access.

Finally protected instance methods are similiar to private methods. They can only be called from within the object, only with one exception. Protected methods can also be called within another object of the same class or of a class that subclasses the same class.

For instance, we can make the getter for `@miles` protected if we wanted to compare the miles of two cars, but also keep that protect that data from access otherwise.
```ruby
class Car
  def initialize(miles)
    @miles = miles
  end

  def ==(other)
    miles == other.miles
  end

  protected

  attr_reader :miles
end
car1 = Car.new(100)
car2 = Car.new(200_000)
puts car1 == car2 # => false
```
