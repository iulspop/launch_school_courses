16. How are the methods `==` and `equal?` different? Show it with an example
The implementation of the `==` method varies depending on the class. Generally it will check if the two objects have the same value. What 'value' means will depend on how the class is implemented.

```ruby
a = [0, 1, 2]
b = [0, 1, 2]
puts a == b # => true
# Different objects, in memory, but same value

b = []
puts a == b # => false
```

The `equal?` method always checks if the two variables point to the same address in memory. In other words, if the two variables reference the identical object.

```ruby
a = [0, 1, 2]
b = [0, 1, 2]
puts a.equal? b # => false
# Different objects, so false

b = a
puts a.equal? b # => true
# Point to the same object, so true

a = 5
b = 5
puts a.equal? b # => true
# Note, numerics and symbols are the same object if they have the same value.
```